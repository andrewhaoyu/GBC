{
    "collab_server" : "",
    "contents" : "##  Research goal is to analyze the association of GBC with Snp.\n##  We used package CGEN to do the analysis\n##  First step is to transform the bed data into tped data with plink\n##so that the package CGEN could read it\n##  ./plink bfile --GBC_final --recode --transpose --out GBC_final\n##  Second step is to split the tped file into 50 small tped file to increase\n##computation speed, we used linux command to do this\n##  split -l 14298 GBC_final.tped GBC_final\n##  use R to perform CGEN analysze\nrm(list=ls()) #clear the environment\n\n\n##  summary data analysis\n##  read the data in R and change affected status from case and control \n##to 1 and 0\nlibrary(ggplot)\nsetwd(\"../data\")\npheno <- read.table(\"pheno_ev\",header=T,sep=\"\\t\")\nfam <- read.table(\"GBC_final.fam\")\nbim <- read.table(\"GBC_final.bim\")\nsave(bim,file=\"locusmap.rda\")\npheno$X <- NULL\npheno$affected_status.1 <- NULL\npheno$affected <- 0\npheno$affected[pheno$affected_status==\"Case\"] <- 1\npheno$familyID <- fam$V1\nidx <- pheno.new$id %in% fam$V2\npheno.new.c <- pheno.new[idx,]\npheno.new.c <- pheno.new.c[match(fam$V2,pheno.new.c$id),]\npheno$highrisk <- pheno.new.c$birth_place_in_high_risk_area\npheno$stoneyn <- pheno.new.c$stone_yn\nwrite.table(pheno,\"pheno.txt\",quote=F,row.names=F,sep=\"\\t\")\n##  test correlation between afftected status and principle components\n##  found EV3+EV4+EV5+EV8+EV9 were significant correlated with affected status\nEV.pheno <- pheno[,17:26]\npheno.EV.cor <- apply(EV.pheno,2,function(x) {cor.test(pheno$affected,x)})\n\n\n\n## the code to run on cluster\n\nrm(list=ls()) \ncommanarg <- commandArgs(trailingOnly = TRUE)\ni1 <- as.numeric(commanarg[1])\n\n\nlibrary(ggplot2)\nlibrary(CGEN)\nlibrary(qqman)\nsetwd(\"../data\")\n##  build snp list for function GxE.scan\nsnp.list <- list()\nsnp.list$format <- \"tped\"\nfile.name <- paste0(\"GBC_final_a\",letters)\nfile.name <- c(file.name,paste0(\"GBC_final_b\",letters[1:24]))\nsnp.list$file <- file.name[i1]\n#snp.list$start.vec <- 1\n#snp.list$stop.vec <- 10\nsnp.list$subject.list <- \"GBC_final.tfam\"\n##  build phenotype list for function GxE.scan\nf = \"pheno.txt\"\npheno.list <- list(file=f, header=1, delimiter=\"\\t\", id.var=c(\"familyID\",\"ID\"), response.var=\"affected\") \npheno.list$file.type <- 3\npheno.list$main.vars <- ~age+gender+EV3+EV4+EV5+EV8+EV9\npheno.list$strata.var <- ~gender\n##  build op list for funciton GxE.scan\nop<- list()\nop$out.file <- paste0(\"GxEout_strat_gender\",i1)\n\nresult <- GxE.scan(snp.list,pheno.list,op)\n\n\n##  result analysze\n##  use GxE.scan.combine to combine all the 50 files together\nout.file <- \"../result/nov_2/all_output.txt\"\ndir <- \"../result/nov_2\"\nGxE.scan.combine(out.file,dir) \nresult <- read.table(\"../result/nov_2/all_output.txt\",header=T)\n##  rematch the snp order as bim file\n##  clean the 0 in chromosome\nresult2 <- result[match(bim$V2,result$SNP),]\nresult2$chromosome <- bim$V1\nresult2$chromosome[result2$chromosome==0] <- NA\nresult2$location <- bim$V4\nresult.UML <- result2[!is.na(result2$chromosome)&!is.na(result2$UML.Omnibus.Pvalue),]\n\n##build the UML, CML, EB three data frame for manhattan and qqplot\n\nUML.result <- data.frame(CHR = result.UML$chromosome,BP = result.UML$location, \n                         P = result.UML$UML.Omnibus.Pvalue,SNP =result.UML$SNP )\n\nmanhattan(UML.result,main=\"UML.result\",chr=\"CHR\",bp=\"BP\",p=\"P\",snp=\"SNP\")\nqq(UML.result$P,main=\"UML.result\")\nresult.CML <- result2[!is.na(result2$chromosome)&!is.na(result2$CML.Omnibus.Pvalue),]\nCML.result <- data.frame(CHR = result.CML$chromosome,BP = result.CML$location, \n                         P = result.CML$CML.Omnibus.Pvalue,SNP =result.CML$SNP )\n\nmanhattan(CML.result,main=\"CML.result\",chr=\"CHR\",bp=\"BP\",p=\"P\",snp=\"SNP\")\nqq(CML.result$P,main=\"CML.result\")\n\nresult.EB <- result2[!is.na(result2$chromosome)&!is.na(result2$EB.Omnibus.Pvalue),]\nEB.result <- data.frame(CHR = result.EB$chromosome,BP = result.EB$location, \n                         P = result.EB$CML.Omnibus.Pvalue,SNP =result.EB$SNP )\n\nmanhattan(EB.result,main=\"EB.result\",chr=\"CHR\",bp=\"BP\",p=\"P\",snp=\"SNP\")\nqq(CML.result$P,main=\"EB.result\")\n\n\n\n##  my question\n##  1.some snp freq is 0\n##  2.the chromosome question\n##  3.which variable should be called strata.var andwhich should be \n##called int.var\n## Sharayu's question double check\n\n\npheno.new <- read.csv(\"pheno.csv\")\n\n\n\n\ncovar <- data.frame(FamID=fam$V1,SampleID=fam$V2,age=pheno.new.c$age,\n                    gender=as.numeric(pheno.new.c$gender),\n                    highriskarea=pheno.new.c$birth_place_in_high_risk_area,\n                    stoneyn=pheno.new.c$stone_yn,\n                    EV3=pheno$EV3,EV4=pheno$EV4,EV5=pheno$EV5,\n                    EV8=pheno$EV8,EV9=pheno$EV9)\n\nwrite.table(covar,\"covar.txt\",sep=\" \",quote=F,row.names=F,col.names=F)\nfreq <- read.table(\"GBC_final.frq\",header=T)\n\n\n\n\n\n\nout.file <- \"../result/nov_4/all_output_strat_highrisk.txt\"\ndir <- \"../result/nov_4\"\npattern <- \"GxEout_strat_highrisk\"\nGxE.scan.combine(out.file,dir) \nresult <- read.table(\"../result/nov_4/all_output_strat_highrisk.txt\",header=T,fill=T)\n##  rematch the snp order as bim file\n##  clean the 0 in chromosome\nresult2 <- result[match(bim$V2,result$SNP),]\nresult2$chromosome <- bim$V1\nresult2$chromosome[result2$chromosome==0] <- NA\nresult2$location <- bim$V4\nresult.UML <- result2[!is.na(result2$chromosome)&!is.na(result2$UML.Omnibus.Pvalue),]\n\n##build the UML, CML, EB three data frame for manhattan and qqplot\n\nUML.result <- data.frame(CHR = result.UML$chromosome,BP = result.UML$location, \n                         P = result.UML$UML.Omnibus.Pvalue,SNP =result.UML$SNP )\n# pdf(\"UMLGWAS.pdf\",width=8,height=6, compress = TRUE)\npng(\"UMLGWAS.png\",width=8,height=6, \n    units = \"in\", res = 600)\nmanhattan(UML.result,main=\"UML.result\",chr=\"CHR\",bp=\"BP\",p=\"P\",snp=\"SNP\")\ndev.off()\npng(\"UMLQQ.png\",width=8,height=6,units=\"in\",res=600)\nqq(UML.result$P,main=\"UML.result\")\ndev.off()\nresult.CML <- result2[!is.na(result2$chromosome)&!is.na(result2$CML.Omnibus.Pvalue),]\nCML.result <- data.frame(CHR = result.CML$chromosome,BP = result.CML$location, \n                         P = result.CML$CML.Omnibus.Pvalue,SNP =result.CML$SNP )\npng(\"CMLGWAS.png\",width=8,height=6,units=\"in\",res=600)\nmanhattan(CML.result,main=\"CML.result\",chr=\"CHR\",bp=\"BP\",p=\"P\",snp=\"SNP\")\ndev.off()\npng(\"CMLQQ.png\",width=8,height=6,units=\"in\",res=600)\nqq(CML.result$P,main=\"CML.result\")\ndev.off()\nresult.EB <- result2[!is.na(result2$chromosome)&!is.na(result2$EB.Omnibus.Pvalue),]\nEB.result <- data.frame(CHR = result.EB$chromosome,BP = result.EB$location, \n                        P = result.EB$CML.Omnibus.Pvalue,SNP =result.EB$SNP )\npng(\"EBGWAS.png\",width=8,height=6,units=\"in\",res=600)\nmanhattan(EB.result,main=\"EB.result\",chr=\"CHR\",bp=\"BP\",p=\"P\",snp=\"SNP\")\ndev.off()\npng(\"EBQQ.png\",width=8,height=6,units=\"in\",res=600)\nqq(EB.result$P,main=\"EB.result\")\ndev.off()\n",
    "created" : 1484358287359.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1031553083",
    "id" : "A6714CA0",
    "lastKnownWriteTime" : 1446753825,
    "last_content_update" : 1446753825,
    "path" : "~/Dropbox/project/Nilanjan/Gallballadar_Cancer/code/GBC/Gallbladder_Cancer_analysis.R",
    "project_path" : "GBC/Gallbladder_Cancer_analysis.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}